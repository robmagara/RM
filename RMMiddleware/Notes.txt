

Coding Tasks
https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/write?view=aspnetcore-2.2

.NET Instrumentation Engineer Project

DONE: Instrumenting .NET applications requires implementation of a profiler written in C++ which we consider too large for an interview project. Therefore, we ask that candidates interested in working on our .NET agent instead implement either an ASP.NET IHttpModule or ASP.NET Core Middleware.
NOTE: Used .NET Core Middleware

DONE: Your IHttpModule (or Middleware) should be designed so that it can be safely added to any ASP.NET (or ASP.NET Core) web application.
NOTE: Using Standard Class Library with required nuget packages to be included in a .NET Core MVC Application

Your project must satisfy the following requirements:

DONE: Measure the total time spent processing the request.
NOTE: Browse to the Test View in RMWeb to see the results

DONE: Measure the size of the response body in bytes. 
DONE: Calculate 
> the minimum, 
> average, and 
> maximum responses seen so far.

NOTE: Reading Response Body Documentation
https://elanderson.net/2017/02/log-requests-and-responses-in-asp-net-core/
https://elanderson.net/tag/middleware/

DONE: Add new content to HTML pages to display information gathered by your project.
NOTE: Run RMWeb Project and browse to [url]/test to see stats displayed to the user

DONE: Ensure that your IHttpModule or Middleware is thread-safe and can correctly handle multiple concurrent requests.
TODO: Research, test and demonstrate thread saftey 
NOTE: Using Singleton and Async and Await design pattern
NOTE: public async Task Invoke(HttpContext context, StatsMiddlewareContainerDTO statsContainer)
statsContainer is passed and used as a reference, implement lock technique to ensure thread saftey 
NOTE: Thread Saftey in .NET Core
https://www.poppastring.com/blog/avoiding-threading-issues-in-aspnet-core

TODO: Handle multiple encodings and different types of pages.
TODO: Use server resources (i.e. memory and processor) efficiently.
NOTE: Use performance tools on Azure

DONE: Include a small web application that demonstrates the behavior of your IHttpModule (or Middleware.) This web application is not the focus of the project and you should feel free to use the web application template projects provided by Visual Studio.
NOTE: See RMWeb ASP .NET Core MVC Project, Startup.cs is wired-up to use the Middleware, View /test displays the stats. 
NOTE: Default MVC Template with Twitter Bootstrap was used, no customization was made

In addition, please make sure to do the following:
TODO: Integrate with a free CI Pipeline to compile, build, test and report in AppVeyor CI or Azure DevOps.
NOTE: https://docs.microsoft.com/en-us/azure/devops-project/azure-devops-project-github
NOTE: Docker for Windows was giving issues locally (on two different machines) and it's required for setting up CI

DONE: Include unit and/or integration tests.
DONE: Wrote functional tests to see that stats are being recorded
TODO: Write more in-depth tests and cover more code with tests

DONE: Include an amazing README in your GitHub project that explains what you built, why you built it, how to deploy it up and how to use it. Include the AppVeyor or Azure DevOps build badge in your README to show status.
DONE: Your project’s README should also outline future improvements you would like to make to the project.

--

DISOVERY NOTES:

Middleware Pipeline - Request delegates are used to build the request pipeline. The request delegates handle each HTTP request.

Exception-handling delegates should be called early in the pipeline, so they can catch exceptions that occur in later stages of the pipeline.

Middleware Components - Reusable classes and in-line anonymous methods

Short-circuits - Terminal Middleware - prevents further middleware from processing requests - When a delegate doesn't pass a request to the next delegate

Use - can short-circuit the pipeline (that is, if it doesn't call a next request delegate)

Map - branches the request pipeline based on matches of the given request path. If the request path starts with the given path, the branch is executed

Run - The first Run encountered terminates the pipeline

HasStarted - a useful hint to indicate if headers have been sent or the body has been written to

Warning - Changes to HttpResponse after the response has started throw an exception
> May cause a protocol violation. For example, writing more than the stated Content-Length
> May corrupt the body format. For example, writing an HTML footer to a CSS file

Order - Startup.Configure - order middleware components are invoked on requests, reverse order for the response 

UseAuthentication - Authentication Middleware, which performs authentication. Authentication doesn't short-circuit unauthenticated requests. Although Authentication Middleware authenticates requests, authorization (and rejection) occurs only after MVC selects a specific Razor Page or MVC controller and action

Singleton - Singleton objects are the same for every object and every request (regardless of whether an instance is provided in ConfigureServices)

Singleton will be the same throughout the app regardless of session/user, if your app is using microservices architecture and each service runs in a separate process, the singleton will be the same in each process

--

Garbage Collection - cleans unused managed objects, reclaims the memory, doesn't clean unmanged objects outside CLR - Common Language Runtime

System Memory Pool

var obj = new object(); - reference created in pool, when declared within a function the memory for obj is released for the garbage collector to pickup and return to the memory pool

GC - your program doesn't have to initiate garbage collection but it can
- balances between performance and app memory usage
- objects are not reclaimed right away

Generation Buckets - define how long the object needs to stay in memory

Gen 0 - GC comes around and removes unused objects and moves used objects to Gen 1
Gen 1 - GC comes around and removes unused objects and moves used objects to Gen 2
Gen 3 - GC comes around and removes unused objects and moves used objects to Gen 3

CLR Profiler - allows view into memory

Gen 0 - you want the most objects here so they are used and reclaimed

GC.Collect(); - forces an immediate GC of all generations 

obj = null; - abandoned on the heap

Finalize method - 

Registers Window - Memory Pointer

Memory Window - Register in Memory

Stack & Heap

new Object - puts reference object on the heap

int i; - value objects on the stack 

--

Closures - returns a function with access to variable within the funciton 

static void Main()
{
	Action action = getMeAction();
	
	action();
	action();
	action();
}

static Action getMeAction()
{
	int i = 0;
	return () => i++; // i is captured within lambda method
}

--

Delegates - compile turns delegate into a class.  Need the Target object to invoke the Method on


delegate void myDelegate();

class Test
{
	static void Main()
	{
		var myDel = new MyDelegate(foo);
		
		myDel(); // compiler is invoking the delegate method when it sees a (); myDel reference the delegate object which points to a method
	}
	
	static void foo()
	{
		Console.WriteLine("FOO");
	}
	
}

--

method - address in ram - jump to that location and execute 

??? yield keyword  

